
DA4A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007a3  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006bf  00000000  00000000  00000a17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e8  00000000  00000000  000010d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  000013c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bd  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000100  00000000  00000000  000017e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000018e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  88:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_4>:
	while (1)
	{																	
	}
}
ISR(PCINT1_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
  a0:	ef 93       	push	r30
  a2:	ff 93       	push	r31
	if(!(PINC & (1<<PINC1)))				// if button is pressed then activate motor for spin selection
  a4:	31 99       	sbic	0x06, 1	; 6
  a6:	37 c0       	rjmp	.+110    	; 0x116 <__vector_4+0x86>
	{
		if(motor == 0)						// if button is pressed the motor will stop
  a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  b0:	89 2b       	or	r24, r25
  b2:	51 f4       	brne	.+20     	; 0xc8 <__vector_4+0x38>
		{
			OCR0A = 0;						// register used to stop motor
  b4:	17 bc       	out	0x27, r1	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	83 ed       	ldi	r24, 0xD3	; 211
  ba:	90 e3       	ldi	r25, 0x30	; 48
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <__vector_4+0x2c>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <__vector_4+0x36>
  c6:	00 00       	nop
			_delay_ms(1000);				// delay used to prevent debouncing
		}
		if (motor == 1)						// if button is pressed motor will turn on
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  cc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	b9 f4       	brne	.+46     	; 0x102 <__vector_4+0x72>
		{
			while((ADCSRA&(1<<ADIF))==0);	// loop used to convert ADC
  d4:	ea e7       	ldi	r30, 0x7A	; 122
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	84 ff       	sbrs	r24, 4
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <__vector_4+0x48>
			motor_spin = ADC;				// set motor_spint to ADC value
  de:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  e2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  e6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <motor_spin+0x1>
  ea:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <motor_spin>
			OCR0A = motor_spin;				// the motor vale is loaded into ORR0A register
  ee:	87 bd       	out	0x27, r24	; 39
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	83 ed       	ldi	r24, 0xD3	; 211
  f4:	90 e3       	ldi	r25, 0x30	; 48
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <__vector_4+0x66>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <__vector_4+0x70>
 100:	00 00       	nop
			_delay_ms(1000);				// mdelay used to prevent debouncing
		}
		motor ^= 1;							// used to toggle motor 
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 106:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	82 27       	eor	r24, r18
 10e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
}
 116:	ff 91       	pop	r31
 118:	ef 91       	pop	r30
 11a:	9f 91       	pop	r25
 11c:	8f 91       	pop	r24
 11e:	2f 91       	pop	r18
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <adc_initializer>:

void adc_initializer(void) 					// function used for ADC
{
	ADMUX = ( 0 << REFS1);				    // used to enable ADC
 12a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0xE7;						    // used to start conversion process
 12e:	87 ee       	ldi	r24, 0xE7	; 231
 130:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 134:	08 95       	ret

00000136 <main>:
int motor_spin;							  // to be able to control the motor with the potentiometer
int	motor = 0;							  // to toggle the motor with the switch will be off at first

int main(void)
{
	DDRD = 0x40;							// sets port d as output
 136:	80 e4       	ldi	r24, 0x40	; 64
 138:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0x02;						    // sets port c as output
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PINC4) | (1 << PINC0);	// enable pull-up pin
 13e:	98 b1       	in	r25, 0x08	; 8
 140:	91 61       	ori	r25, 0x11	; 17
 142:	98 b9       	out	0x08, r25	; 8
	TCCR0A= 0x03;							// set fast PWM and clears OCR0A on MATCH
 144:	93 e0       	ldi	r25, 0x03	; 3
 146:	94 bd       	out	0x24, r25	; 36
	TCCR0B= 0x05;						    // set pre-scaler to 1024
 148:	95 e0       	ldi	r25, 0x05	; 5
 14a:	95 bd       	out	0x25, r25	; 37
	PCICR = 0x02;							// enable PCIE1 to make PCMSK1 work
 14c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK1 = 0x02;							// enable pin changes
 150:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	sei();									// enable interrupts
 154:	78 94       	sei
	adc_initializer();						// initializes ADC
 156:	0e 94 95 00 	call	0x12a	; 0x12a <adc_initializer>
 15a:	ff cf       	rjmp	.-2      	; 0x15a <main+0x24>

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
