
Midterm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ae  00800100  0000033a  000003ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000048c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bef  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000798  00000000  00000000  0000110b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000447  00000000  00000000  000018a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001cec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000402  00000000  00000000  00001d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000462  00000000  00000000  0000217e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000025e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 3a       	cpi	r26, 0xAE	; 174
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  8e:	0c 94 9b 01 	jmp	0x336	; 0x336 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <initUSART>:
uint8_t  usart_Receive(void){
	
	while(!(UCSR0A & (1<<RXC0)));
	return UDR0;
	
}
  96:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  9a:	83 e3       	ldi	r24, 0x33	; 51
  9c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  a0:	88 e1       	ldi	r24, 0x18	; 24
  a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  a6:	e2 ec       	ldi	r30, 0xC2	; 194
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	86 60       	ori	r24, 0x06	; 6
  ae:	80 83       	st	Z, r24
  b0:	08 95       	ret

000000b2 <usart_Transmit>:
  b2:	e0 ec       	ldi	r30, 0xC0	; 192
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	90 81       	ld	r25, Z
  b8:	95 ff       	sbrs	r25, 5
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <usart_Transmit+0x4>
  bc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  c0:	08 95       	ret

000000c2 <usart_Message>:

void usart_Message(uint8_t* msg){
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	ec 01       	movw	r28, r24
	
	while(*msg){
  c8:	88 81       	ld	r24, Y
  ca:	88 23       	and	r24, r24
  cc:	31 f0       	breq	.+12     	; 0xda <usart_Message+0x18>
  ce:	21 96       	adiw	r28, 0x01	; 1
		usart_Transmit(*msg);
  d0:	0e 94 59 00 	call	0xb2	; 0xb2 <usart_Transmit>
	
}

void usart_Message(uint8_t* msg){
	
	while(*msg){
  d4:	89 91       	ld	r24, Y+
  d6:	81 11       	cpse	r24, r1
  d8:	fb cf       	rjmp	.-10     	; 0xd0 <usart_Message+0xe>
		msg ++;
		
	}
	
	
}
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <initADC>:
//###########################################################################
void initADC(void)
{
	// AV CC with external capacitor at AREF pin
	ADMUX |= (1<<REFS0);
  e0:	ec e7       	ldi	r30, 0x7C	; 124
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	80 83       	st	Z, r24
	//set prescaller to 128 and enable ADC
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	87 68       	ori	r24, 0x87	; 135
  f2:	80 83       	st	Z, r24
  f4:	08 95       	ret

000000f6 <readADC>:
}

uint16_t readADC(uint8_t ADCchannel){
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
  f6:	ec e7       	ldi	r30, 0x7C	; 124
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	90 81       	ld	r25, Z
  fc:	90 7f       	andi	r25, 0xF0	; 240
  fe:	8f 70       	andi	r24, 0x0F	; 15
 100:	89 2b       	or	r24, r25
 102:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);//start conversation
 104:	ea e7       	ldi	r30, 0x7A	; 122
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	80 64       	ori	r24, 0x40	; 64
 10c:	80 83       	st	Z, r24
	//Wait until ADC converstain complete. ADSC will be ZERO after completion.
	while(ADCSRA & (1<<ADSC));
 10e:	80 81       	ld	r24, Z
 110:	86 fd       	sbrc	r24, 6
 112:	fd cf       	rjmp	.-6      	; 0x10e <readADC+0x18>
	return ADC;
 114:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 118:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	
}
 11c:	08 95       	ret

0000011e <main>:
	uint16_t voltage;
	uint8_t val1, val2,val3,temperature;
	//DDRD |= (1 << PD1);  //TX as an output (PD1)
	//DDRD &= ~(1 << PD0);
	//DDRB |= (1 << PB0);
	initUSART();
 11e:	0e 94 4b 00 	call	0x96	; 0x96 <initUSART>
	initADC();
 122:	0e 94 70 00 	call	0xe0	; 0xe0 <initADC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	34 e3       	ldi	r19, 0x34	; 52
 12a:	4c e0       	ldi	r20, 0x0C	; 12
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	30 40       	sbci	r19, 0x00	; 0
 130:	40 40       	sbci	r20, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0xe>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x18>
 136:	00 00       	nop
	_delay_ms(500);
	//usart_Message("LM35 Temperature Sensor\r\n");
	//  usart_Init();
	
	usart_Message("AT+CIOBAUD=9600\r\n"); // sets the baud for esp8266 to 9600
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	0e 94 61 00 	call	0xc2	; 0xc2 <usart_Message>
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	99 e6       	ldi	r25, 0x69	; 105
 144:	28 e1       	ldi	r18, 0x18	; 24
 146:	81 50       	subi	r24, 0x01	; 1
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	20 40       	sbci	r18, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0x28>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x32>
 150:	00 00       	nop
	_delay_ms(1000);
	usart_Message("AT+CWMODE=1\r\n");
 152:	82 e1       	ldi	r24, 0x12	; 18
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 61 00 	call	0xc2	; 0xc2 <usart_Message>
 15a:	3f ef       	ldi	r19, 0xFF	; 255
 15c:	49 e6       	ldi	r20, 0x69	; 105
 15e:	88 e1       	ldi	r24, 0x18	; 24
 160:	31 50       	subi	r19, 0x01	; 1
 162:	40 40       	sbci	r20, 0x00	; 0
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0x42>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x4c>
 16a:	00 00       	nop
	_delay_ms(1000);
	usart_Message("AT+CWJAP=\"mat_wifi\",\"croatiacroatia\"\r\n"); // wifi setup
 16c:	80 e2       	ldi	r24, 0x20	; 32
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	0e 94 61 00 	call	0xc2	; 0xc2 <usart_Message>
 174:	9f ef       	ldi	r25, 0xFF	; 255
 176:	23 e2       	ldi	r18, 0x23	; 35
 178:	34 ef       	ldi	r19, 0xF4	; 244
 17a:	91 50       	subi	r25, 0x01	; 1
 17c:	20 40       	sbci	r18, 0x00	; 0
 17e:	30 40       	sbci	r19, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <main+0x5c>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0x66>
 184:	00 00       	nop
		voltage = readADC(ADC0);
		voltage = ((T*voltage)/10) + 2;
		
		if (voltage >= 100){
			val1 = voltage / 100;
			val2 = voltage % 100;
 186:	0f 2e       	mov	r0, r31
 188:	f4 e6       	ldi	r31, 0x64	; 100
 18a:	ff 2e       	mov	r15, r31
 18c:	f0 2d       	mov	r31, r0
			val3 = val2 % 10;
 18e:	0d ec       	ldi	r16, 0xCD	; 205
	_delay_ms(1000);
	usart_Message("AT+CWJAP=\"mat_wifi\",\"croatiacroatia\"\r\n"); // wifi setup
	_delay_ms(10000);
	
	while(1){
		voltage = readADC(ADC0);
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 7b 00 	call	0xf6	; 0xf6 <readADC>
		voltage = ((T*voltage)/10) + 2;
 196:	9c 01       	movw	r18, r24
 198:	22 0f       	add	r18, r18
 19a:	33 1f       	adc	r19, r19
 19c:	22 0f       	add	r18, r18
 19e:	33 1f       	adc	r19, r19
 1a0:	ad ec       	ldi	r26, 0xCD	; 205
 1a2:	bc ec       	ldi	r27, 0xCC	; 204
 1a4:	0e 94 8c 01 	call	0x318	; 0x318 <__umulhisi3>
 1a8:	96 95       	lsr	r25
 1aa:	87 95       	ror	r24
 1ac:	96 95       	lsr	r25
 1ae:	87 95       	ror	r24
 1b0:	96 95       	lsr	r25
 1b2:	87 95       	ror	r24
 1b4:	ac 01       	movw	r20, r24
 1b6:	4e 5f       	subi	r20, 0xFE	; 254
 1b8:	5f 4f       	sbci	r21, 0xFF	; 255
		
		if (voltage >= 100){
 1ba:	44 36       	cpi	r20, 0x64	; 100
 1bc:	51 05       	cpc	r21, r1
 1be:	30 f1       	brcs	.+76     	; 0x20c <main+0xee>
			val1 = voltage / 100;
 1c0:	9a 01       	movw	r18, r20
 1c2:	36 95       	lsr	r19
 1c4:	27 95       	ror	r18
 1c6:	36 95       	lsr	r19
 1c8:	27 95       	ror	r18
 1ca:	ab e7       	ldi	r26, 0x7B	; 123
 1cc:	b4 e1       	ldi	r27, 0x14	; 20
 1ce:	0e 94 8c 01 	call	0x318	; 0x318 <__umulhisi3>
 1d2:	96 95       	lsr	r25
 1d4:	87 95       	ror	r24
 1d6:	18 2f       	mov	r17, r24
			val2 = voltage % 100;
 1d8:	f8 9e       	mul	r15, r24
 1da:	90 01       	movw	r18, r0
 1dc:	f9 9e       	mul	r15, r25
 1de:	30 0d       	add	r19, r0
 1e0:	11 24       	eor	r1, r1
 1e2:	42 1b       	sub	r20, r18
 1e4:	53 0b       	sbc	r21, r19
			val3 = val2 % 10;
 1e6:	40 9f       	mul	r20, r16
 1e8:	d1 2d       	mov	r29, r1
 1ea:	11 24       	eor	r1, r1
 1ec:	cd 2f       	mov	r28, r29
 1ee:	c6 95       	lsr	r28
 1f0:	c6 95       	lsr	r28
 1f2:	c6 95       	lsr	r28
 1f4:	cc 0f       	add	r28, r28
 1f6:	9c 2f       	mov	r25, r28
 1f8:	99 0f       	add	r25, r25
 1fa:	99 0f       	add	r25, r25
 1fc:	c9 0f       	add	r28, r25
 1fe:	84 2f       	mov	r24, r20
 200:	8c 1b       	sub	r24, r28
 202:	c8 2f       	mov	r28, r24
			val2 = val2 / 10;
 204:	d6 95       	lsr	r29
 206:	d6 95       	lsr	r29
 208:	d6 95       	lsr	r29
 20a:	1a c0       	rjmp	.+52     	; 0x240 <main+0x122>
		}
		else{
			val1 = 0;
			val2 = voltage / 10;
 20c:	9a 01       	movw	r18, r20
 20e:	ad ec       	ldi	r26, 0xCD	; 205
 210:	bc ec       	ldi	r27, 0xCC	; 204
 212:	0e 94 8c 01 	call	0x318	; 0x318 <__umulhisi3>
 216:	96 95       	lsr	r25
 218:	87 95       	ror	r24
 21a:	96 95       	lsr	r25
 21c:	87 95       	ror	r24
 21e:	96 95       	lsr	r25
 220:	87 95       	ror	r24
 222:	d8 2f       	mov	r29, r24
			val3 = voltage % 10;
 224:	9c 01       	movw	r18, r24
 226:	22 0f       	add	r18, r18
 228:	33 1f       	adc	r19, r19
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	82 0f       	add	r24, r18
 238:	93 1f       	adc	r25, r19
 23a:	c4 2f       	mov	r28, r20
 23c:	c8 1b       	sub	r28, r24
			val2 = voltage % 100;
			val3 = val2 % 10;
			val2 = val2 / 10;
		}
		else{
			val1 = 0;
 23e:	10 e0       	ldi	r17, 0x00	; 0
			val3 = voltage % 10;
		}
		//Decimal 48=0 Decimal 49=1  Decimal 50 =2 For more information see ASCII table.
		
		
		usart_Message("AT+CIPSTART=\"TCP\",\"184.107.155.160\",80\r\n"); // connect to thingspeak using TCP
 240:	87 e4       	ldi	r24, 0x47	; 71
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	0e 94 61 00 	call	0xc2	; 0xc2 <usart_Message>
 248:	9f ef       	ldi	r25, 0xFF	; 255
 24a:	29 e6       	ldi	r18, 0x69	; 105
 24c:	38 e1       	ldi	r19, 0x18	; 24
 24e:	91 50       	subi	r25, 0x01	; 1
 250:	20 40       	sbci	r18, 0x00	; 0
 252:	30 40       	sbci	r19, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <main+0x130>
 256:	00 c0       	rjmp	.+0      	; 0x258 <main+0x13a>
 258:	00 00       	nop
		_delay_ms(1000);
		
		// send data to thingspeak
		usart_Message("AT+CIPSEND=49\r\n"); // send the following 49 characters
 25a:	80 e7       	ldi	r24, 0x70	; 112
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	0e 94 61 00 	call	0xc2	; 0xc2 <usart_Message>
 262:	4f ef       	ldi	r20, 0xFF	; 255
 264:	84 e3       	ldi	r24, 0x34	; 52
 266:	9c e0       	ldi	r25, 0x0C	; 12
 268:	41 50       	subi	r20, 0x01	; 1
 26a:	80 40       	sbci	r24, 0x00	; 0
 26c:	90 40       	sbci	r25, 0x00	; 0
 26e:	e1 f7       	brne	.-8      	; 0x268 <main+0x14a>
 270:	00 c0       	rjmp	.+0      	; 0x272 <main+0x154>
 272:	00 00       	nop
		_delay_ms(500);
		usart_Message("GET /update?api_key=D5Z10UY1NHTSXMKR9&field1="); // protocol to send data// write key
 274:	80 e8       	ldi	r24, 0x80	; 128
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	0e 94 61 00 	call	0xc2	; 0xc2 <usart_Message>
		usart_Transmit(val1 + 48);
 27c:	10 5d       	subi	r17, 0xD0	; 208
 27e:	81 2f       	mov	r24, r17
 280:	0e 94 59 00 	call	0xb2	; 0xb2 <usart_Transmit>
		usart_Transmit(val2 + 48);
 284:	d0 5d       	subi	r29, 0xD0	; 208
 286:	8d 2f       	mov	r24, r29
 288:	0e 94 59 00 	call	0xb2	; 0xb2 <usart_Transmit>
		usart_Transmit(val3 + 48);
 28c:	c0 5d       	subi	r28, 0xD0	; 208
 28e:	8c 2f       	mov	r24, r28
 290:	0e 94 59 00 	call	0xb2	; 0xb2 <usart_Transmit>
		usart_Message("\r\n");
 294:	84 e4       	ldi	r24, 0x44	; 68
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	0e 94 61 00 	call	0xc2	; 0xc2 <usart_Message>
 29c:	2f ef       	ldi	r18, 0xFF	; 255
 29e:	39 e6       	ldi	r19, 0x69	; 105
 2a0:	48 e1       	ldi	r20, 0x18	; 24
 2a2:	21 50       	subi	r18, 0x01	; 1
 2a4:	30 40       	sbci	r19, 0x00	; 0
 2a6:	40 40       	sbci	r20, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <main+0x184>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <main+0x18e>
 2ac:	00 00       	nop
		_delay_ms(1000);
		usart_Message("AT+CIPSEND=49\r\n");
 2ae:	80 e7       	ldi	r24, 0x70	; 112
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	0e 94 61 00 	call	0xc2	; 0xc2 <usart_Message>
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	94 e3       	ldi	r25, 0x34	; 52
 2ba:	2c e0       	ldi	r18, 0x0C	; 12
 2bc:	81 50       	subi	r24, 0x01	; 1
 2be:	90 40       	sbci	r25, 0x00	; 0
 2c0:	20 40       	sbci	r18, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <main+0x19e>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <main+0x1a8>
 2c6:	00 00       	nop
		_delay_ms(500);
		usart_Message("GET /update?api_key=D5Z10UY1NHTSXMKR9&field1="); ///write keys
 2c8:	80 e8       	ldi	r24, 0x80	; 128
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	0e 94 61 00 	call	0xc2	; 0xc2 <usart_Message>
		usart_Transmit(val1 + 48);
 2d0:	81 2f       	mov	r24, r17
 2d2:	0e 94 59 00 	call	0xb2	; 0xb2 <usart_Transmit>
		usart_Transmit(val2 + 48);
 2d6:	8d 2f       	mov	r24, r29
 2d8:	0e 94 59 00 	call	0xb2	; 0xb2 <usart_Transmit>
		usart_Transmit(val3 + 48);
 2dc:	8c 2f       	mov	r24, r28
 2de:	0e 94 59 00 	call	0xb2	; 0xb2 <usart_Transmit>
		usart_Message("\r\n");
 2e2:	84 e4       	ldi	r24, 0x44	; 68
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0e 94 61 00 	call	0xc2	; 0xc2 <usart_Message>
 2ea:	3f ef       	ldi	r19, 0xFF	; 255
 2ec:	49 e6       	ldi	r20, 0x69	; 105
 2ee:	88 e1       	ldi	r24, 0x18	; 24
 2f0:	31 50       	subi	r19, 0x01	; 1
 2f2:	40 40       	sbci	r20, 0x00	; 0
 2f4:	80 40       	sbci	r24, 0x00	; 0
 2f6:	e1 f7       	brne	.-8      	; 0x2f0 <main+0x1d2>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <main+0x1dc>
 2fa:	00 00       	nop
 2fc:	8f e0       	ldi	r24, 0x0F	; 15
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	2f ef       	ldi	r18, 0xFF	; 255
 302:	39 e6       	ldi	r19, 0x69	; 105
 304:	48 e1       	ldi	r20, 0x18	; 24
 306:	21 50       	subi	r18, 0x01	; 1
 308:	30 40       	sbci	r19, 0x00	; 0
 30a:	40 40       	sbci	r20, 0x00	; 0
 30c:	e1 f7       	brne	.-8      	; 0x306 <main+0x1e8>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <main+0x1f2>
 310:	00 00       	nop
 312:	01 97       	sbiw	r24, 0x01	; 1
		_delay_ms(1000);
		
		for(int i = 0; i < 15; i++){
 314:	a9 f7       	brne	.-22     	; 0x300 <main+0x1e2>
 316:	3c cf       	rjmp	.-392    	; 0x190 <main+0x72>

00000318 <__umulhisi3>:
 318:	a2 9f       	mul	r26, r18
 31a:	b0 01       	movw	r22, r0
 31c:	b3 9f       	mul	r27, r19
 31e:	c0 01       	movw	r24, r0
 320:	a3 9f       	mul	r26, r19
 322:	70 0d       	add	r23, r0
 324:	81 1d       	adc	r24, r1
 326:	11 24       	eor	r1, r1
 328:	91 1d       	adc	r25, r1
 32a:	b2 9f       	mul	r27, r18
 32c:	70 0d       	add	r23, r0
 32e:	81 1d       	adc	r24, r1
 330:	11 24       	eor	r1, r1
 332:	91 1d       	adc	r25, r1
 334:	08 95       	ret

00000336 <_exit>:
 336:	f8 94       	cli

00000338 <__stop_program>:
 338:	ff cf       	rjmp	.-2      	; 0x338 <__stop_program>
